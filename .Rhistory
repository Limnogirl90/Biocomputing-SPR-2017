biomass
biomass.means <- apply(biomass$V2,2,FUN = mean(biomass))
biomass.means <- apply(biomass$V2,2,FUN = function(i) mean(i))
biomass.means <- apply(biomass,2,FUN = function(i) mean(i))
dim(biomass)
biomass.means <- apply(biomass$V2,FUN = function(i) mean(i))
treatment <- as.factor(biomass$V1)
treatment.means <- mean(biomass~treatment)
treatment.means <- mean(biomass$V2~treatment)
plot(treatment~biomass$V2)
plot(biomass$V2~treatment)
plot(mean(biomass$V2)~treatment)
plot(mean(biomass$V2~treatment))
sd <- apply(biomass$V2~treatment,sd)
sd <- apply(biomass$V2~treatment,FUN = sd)
sd <- apply(biomass$V2,2,FUN = sd)
summary(y.fit)
x = runif(0:10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2)
plot(y~x)
y.fit = lm(y~x)
summary(y.fit)
plot(y.fit)
?runif
x = runif(10, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2)
plot(y~x)
y.fit = lm(y~x)
summary(y.fit)
resid(y.fit)
plot(resid(y.fit))
plot(y.fit)
x1 = runif(100, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x1+rnorm(length(x1),0,2)
plot(y~x1)
x = runif(10, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2)
df <- data.frame(x = x,
y = B0 + B1*x+rnorm(length(x),0,2))
x = runif(10, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2)
df <- data.frame(x = x,
y = B0 + B1*x+rnorm(length(x),0,2))
mod <- lm(y ~ x, data = df)
newx <- seq(min(df$x), max(df$x), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
plot(y ~ x, data = df)
# add fill
abline(mod)
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
x1 = runif(100, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x1),0,2)
df <- data.frame(x1 = x1,
y = B0 + B1*x1+rnorm(length(x1),0,2))
plot(y ~ x1, data = df)
# model
mod <- lm(y ~ x1, data = df)
# predicts + interval
newx <- seq(min(df$x1), max(df$x1), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
# plot
plot(y ~ x1, data = df)
abline(mod)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
?length.out
x = runif(10, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2)
df <- data.frame(x = x,
y = B0 + B1*x+rnorm(length(x),0,2))
plot(y ~ x, data = df)
# model
mod <- lm(y ~ x, data = df)
# predicts + interval
newx <- seq(min(df$x), max(df$x), length.out=10)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
plot(y ~ x, data = df)
# model
abline(mod)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
plot(y ~ x1, data = df)
error.bars(sd=T)
install.packages("psych")
library(psych)
plot(y ~ x1, data = df)
error.bars(sd=T, alpha=.05)
plot(y ~ x1, data = df)
error.bars(x=x1,sd=T, alpha=.05)
library(MASS)
data(whiteside)
fitA=lm(whiteside$Gas~whiteside$Temp)
fitB=lm(whiteside$Gas~whiteside$Temp+whiteside$Insul)#interaction of temp and insulation
fitC=lm(whiteside$Gas~whiteside$Temp*whiteside$Insul)#cross of temp and insulation
plot(whiteside$Gas~whiteside$Temp)
plot(whiteside$Gas~whiteside$Temp+whiteside$Insul)
calcNLL<-function(p,x,y){
m=p[1]
b=p[2]
sigma=exp(p[3])
yhat=m*x+b
NLL=-sum(dnorm(y,yhat,sigma,log=TRUE))
return(NLL)
}
LL.optim <- optim(par = c(-4,2.5,2), fn=calcNLL, x=x,y=y)
LL.optim
summary(LL.optim)
x = runif(10, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2)
plot(y~x)
y.fit = lm(y~x)
summary(y.fit)
x1 = runif(100, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x1+rnorm(length(x1),0,2)
plot(y~x1)
y.fit = lm(y~x1)
summary(y.fit)
library(MASS)
data(whiteside)
fitA=lm(whiteside$Gas~whiteside$Temp)
fitB=lm(whiteside$Gas~whiteside$Temp+whiteside$Insul)#interaction of temp and insulation
fitC=lm(whiteside$Gas~whiteside$Temp*whiteside$Insul)#cross of temp and insulation
summary(fitA) #estimate intercept 5.4862 whiteside$temp -.2902 res error .8606 r2 .457
summary(fitB) #estimate intercept 6.55 whiteside$temp -.33670 whiteside$insulafter -1.565 res error .3574
#r2 .9063
summary(fitC)
plot(whiteside$Gas~whiteside$Temp)
plot(whiteside$Gas~whiteside$Temp*whiteside$Insul)
plot(whiteside$Temp~whiteside$Insul)
biomass
fit.biomass <- lm(biomass$V2~treatment)
summary(fit.biomass)
calcNLL<-function(p,x,y){
m=p[1]
b=p[2]
sigma=exp(p[3])
yhat=m*x+b
NLL=-sum(dnorm(y,yhat,sigma,log=TRUE))
return(NLL)
}
LL.optim <- optim(par = c(1,1,1), fn=calcNLL, data=biomass)
LL.optim <- optim(par = c(1,1,1), fn=calcNLL, x = biomass$V1, y=biomass$V2)
summary(fit.biomass)
plot(biomass$V2~treatment)
biomass <- read.table("rainManipBiomass.txt", header =T, stringsAsFactors = F)
LL.optim <- optim(par = c(1,1,1), fn=calcNLL, x = biomass$V1, y=biomass$V2)
x = runif(10, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x+rnorm(length(x),0,2) ##should use sqrt2 for SD
plot(y~x)
y.fit = lm(y~x)
summary(y.fit)
resid(y.fit)
plot(resid(y.fit))
plot(y.fit) #to see expected values for model estimated from simulated data
x1 = runif(100, min=0, max=10)
B0 = -4
B1 = 2.5
y=B0 + B1*x1+rnorm(length(x1),0,2)
plot(y~x1)
y.fit = lm(y~x1)
summary(y.fit)
x = runif(10,0,10)
B0=-4
B1=2.5
sigma = 2
y = B0+B1*x+rnorm(length(x),0,sqrt(sigma))
nll <- function(p,x,y){
B0 =p[1]
B1=p[2]
sigma2 = exp(p[3]) #needs exponent to make it positive
yhat = B0+B1*x
nll = -sum(dnorm(y,mean=yhat,sd=sqrt(sigma2),log=T)) #dnorm is probability density function, and we use y because
#our observations and yhat is expected values
return(nll) #returns sum of vector of 10
}
guess = c(B0=-2,B1=1,sigma2=0)
fit = optim(par=guess, fn=nll, x=x,y=y)
fit
biomass <- read.table("rainManipBiomass.txt", header =T, stringsAsFactors = F)
biomass
##create barplot of mean of each treatment level
treatment <- as.factor(biomass$V1)
plot(biomass$V2~treatment)
?ggplot
biomass <- read.table("rainManipBiomass.txt", header =T, stringsAsFactors = F)
biomass
means=tapply(biomass$V2,treatment, mean)
sds=tapply(biomass$V2,treatment, sd)
means
x1 = biomass$v1[which(biomass$V1=="wet")]1
x1 = biomass$v1[which(biomass$V1=="wet")]
x1
x1 = biomass$v1[which(biomass$V1=="wet")]
x1 =1
x2 = biomass$V1[which(biomass$v1=="drought")]
x2=2
cbind(x1,x2,biomass$V2)
x1 = biomass$v2[which(biomass$V1=="wet")]
x1 =1
x2 = biomass$V2[which(biomass$v1=="drought")]
x2=2
cbind(x1,x2,biomass$V2)
biomass
means=tapply(biomass$V2,treatment, mean)
sds=tapply(biomass$V2,treatment, sd)
treat = c("drought", "ambient","wet")
data.biomass <- data.frame(means,sds,treat)
data.biomass
data.biomass <- data.frame(means,sds)
data.biomass
ggplot(data=data.biomass)
ggplot(data=data.biomass, x = biomass$V1, y = means)
library(ggplot2)
qplot(biomass$V1, biomass$V2, data=biomass, geom=c("boxplot", "jitter"),
fill=biomass$V1, main="Effect of treatment on biomass",
xlab="Treatment", ylab="Biomass")
biomassplot<-qplot(biomass$V1, biomass$V2, data=biomass, geom=c("boxplot", "jitter"),
fill=biomass$V1, main="Effect of treatment on biomass",
xlab="Treatment", ylab="Biomass")
biomassplot + geom_point()+ geom_smooth()
biomassplot
biomassplot<-qplot(biomass$V1, biomass$V2, data=biomass, geom=c("boxplot", "jitter"),
fill=biomass$V1, main="Effect of treatment on biomass",
xlab="Treatment", ylab="Biomass")
biomassplot + geom(barplot())
?barplot
barplot(height=means,names.arg = treat)
qplot(means)+geom_errorbar(aes(ymin=means-sds*2, ymax=means+sd*2), width=0.25)
qplot(means)+geom_errorbar(aes(ymin=means-sds, ymax=means+sd), width=0.25)
qplot(means, treat)+geom_errorbar(aes(ymin=means-sds, ymax=means+sd), width=0.25)
qplot(means)+geom_errorbar(aes(ymin=means-sds, ymax=means+sds), width=0.25)
qplot(treat,means)+geom_errorbar(aes(ymin=means-sds, ymax=means+sds), width=0.25)
means=tapply(biomass$V2,treatment, mean)
sds=tapply(biomass$V2,treatment, sd)
treat = c("ambient", "drought","wet")
qplot(treat,means)+geom_errorbar(aes(ymin=means-sds, ymax=means+sds), width=0.25)
qplot(treat,means)+geom_errorbar(aes(ymin=means-sds*2, ymax=means+sds*2), width=0.25)
4*0.8*.1
1.52/.32
75*2*3*3
75*2*2*3
tadpoles <- read.table("tadpoles.txt")
tadpoles
tadpoles <- read.table("tadpoles.txt", header=T)
tadpoles
plot(tadpoles[,1],tadpoles[,2])
consumed = tadpoles[,1]-tadpoles[,2]
plot(tadpoles[,1],consumed)
?dbinom
tadpoleNLL <- function(p,N,consumed){
a=p[1]
h=p[2]
p = (a/(1+a*h*N)) #deterministic
NLL = -sum(dbinom(consumed,N,p,log=T)) ##likelihood function, stochastic
return(NLL)
}
guess=c(0.1,-0.1)
fit = optim(par=guess,fn=tadpoleNLL, N=tadpoles[,1],k=consumed)
deer <- read.table("propForaging.txt", header=T)
deer
deer <- read.table("propForaging.txt", header=F)
deer
hist(deer, ylab="Foraging time", xlab="Number of deer")
hist(deer)
hist(deer$V1)
hist(deer$V1, xlab="Proportion of time spent foraging")
hist(deer$V1, xlab="Proportion of time spent foraging", main="")
?hist
hist(deer$V1, breaks = 0.1, xlab="Proportion of time spent foraging", main="")
hist(deer$V1, breaks = 7, xlab="Proportion of time spent foraging", main="")
plot(deer$V1)
?dbeta
deerNLL <- function(params,N,k){
a=p[1]
b=p[2]
p = (a*N*e^-b*N) #deterministic
NLL = -sum(dbeta(N,k,log=T)) ##likelihood function, stochastic
return(NLL)
}
hist(deer$V1, breaks = 7, xlab="Proportion of time spent foraging", main="")
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, k=deer$V1)
deerNLL <- function(params,N,k){
a=p[1]
b=p[2]
p = (a*N*e^-b*N) #deterministic
NLL = -sum(dbeta(N,k,p,log=T)) ##likelihood function, stochastic
return(NLL)
}
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, k=deer$V1)
guess <- c(.1,.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, k=deer$V1)
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, k=deer$V1)
deerNLL <- function(params,N,k){
a=p[1]
b=p[2]
p = a*N^-b*N #deterministic
NLL = -sum(dbeta(N,k,p,log=T)) ##likelihood function, stochastic
return(NLL)
}
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, k=deer$V1)
deerNLL <- function(params,N,p){
a=p[1]
b=p[2]
p = a*N^-b*N #deterministic
NLL = -sum(dbeta(N,p,log=T)) ##likelihood function, stochastic
return(NLL)
}
uess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, p=deer$V1)
?dbeta
deerNLL <- function(params,N,a,b){
c=p[1]
d=p[2]
p = c*N^-d*N #deterministic
NLL = -sum(dbeta(N,a,b,log=T)) ##likelihood function, stochastic
return(NLL)
}
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, p=deer$V1)
p=deer$V1
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=100, p=p)
deerNLL <- function(params,a,b){
c=p[1]
d=p[2]
p = c*N^-d*N #deterministic
NLL = -sum(dbeta(N,a,b,log=T)) ##likelihood function, stochastic
return(NLL)
}
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=deer)
guess <- c(.1,.1)
fit = optim(par=guess, fn=deerNLL, N=deer$V1)
deerNLL <- function(p,forage,N){
a=p[1]
b=p[2]
shape=p[3]
meanforage = a*N*exp(-b*N)
NLL= -sum(dbeta(forage,shape=shape,shape2=meanforage/shape,log=T))
return(NLL)
}
fit = optim(par=c(a=0.1,b=0.1,shape=100), fn=deerNLL, forage=deer$V1)
fit = optim(par=c(a=0.1,b=0.1,shape=100), fn=deerNLL, forage=deer$V1, N=numeric(length(deer$V1)))
ggplot(deer$V1, aes(x = X)) + geom_histogram(aes(y = ..density..), binwidth = 0.1) + geom_density()
hist(deer$V1, breaks = 7, xlab="Proportion of time spent foraging", main="")
lines(density(deer$V1),na.rm=TRUE)
DeerNLL<-function(params,N){
a=params[1]
b=params[2]
c=params[3]
shape1=params[4]
meanforage <- (a*N)/(b+N)^c
NLL = -sum(dbeta(meanforage,shape1=shape1,shape2=(1-shape1)))
return(NLL)
}
DeerNLL<-function(params,N){
a=params[1]
b=params[2]
c=params[3]
shape1=params[4]
meanforage <- (a*N)/(b+N)^c
NLL = -sum(dbeta(meanforage,shape1=shape1,shape2=(1-shape1)))
return(NLL)
}
guess = c(1,1,1,.2)
deerfit <- optim(par=guess, fn=DeerNLL, N=deer$V1)
deerfit
oak <- read.table("oakDensities.txt",header=T)
oak
plot(moisture, density)
moisture <- oak$soilMoisture
density <- oak$oakDensity
plot(moisture, density)
plot(moisture, density/moisture)
?dnbinom
hist(deer$V1, breaks = 7, xlab="Proportion of time spent foraging", main="")
lines(density(deer$V1),na.rm=TRUE)
plot(deerfit$par[1])
lines(seq(0,100),deerfit$par[1]/(1+deerfit$par[1]*deerfit$par[2]*seq(0,100))*seq(0,100),lwd=4,lty=2)
hist(deer$V1, breaks = 7, xlab="Proportion of time spent foraging", main="")
qplot(deer$V1, geom="histogram")
ggplot(data=deer, aes(deer$V1)) + geom_histogram()
ggplot(data=deer, stat_bin=7, aes(deer$V1)) + geom_histogram()
DeerNLL<-function(params,N){
a=params[1]
b=params[2]
c=params[3]
shape1=params[4]
meanforage <- a*N*exp(-b*N)
NLL = -sum(dbeta(meanforage,shape1=shape1,shape2=(1-shape1)))
return(NLL)
}
guess = c(1,1,1,.2)
deerfit <- optim(par=guess, fn=DeerNLL, N=deer$V1)
deerfit
DeerNLL<-function(params,N){
a=params[1]
b=params[2]
shape1=params[3]
meanforage <- a*N*exp(-b*N)
NLL = -sum(dbeta(meanforage,shape1=shape1,shape2=(1-shape1)))
return(NLL)
}
guess = c(1,1,1,.2)
deerfit <- optim(par=guess, fn=DeerNLL, N=deer$V1)
DeerNLL<-function(params,N){
a=params[1]
b=params[2]
shape1=params[3]
shape2=params[4]
meanforage <- a*N*exp(-b*N)
NLL = -sum(dbeta(meanforage,shape1=shape1,shape2=shape2))
return(NLL)
}
guess = c(1,1,.8,.2)
deerfit <- optim(par=guess, fn=DeerNLL, N=deer$V1)
deerfit
guess = c(1,1,1.8,1.2)
deerfit <- optim(par=guess, fn=DeerNLL, N=deer$V1)
deerfit
DeerNLL<-function(params,p){
a=params[1]
b=params[2]
shape1=params[3]
shape2=params[4]
meanforage <- a*p*exp(-b*p)
NLL = -sum(dbeta(meanforage,shape1=shape1,shape2=shape2))
return(NLL)
}
guess = c(1,1,1.8,1.2)
deerfit <- optim(par=guess, fn=DeerNLL, p=deer$V1)
deerfit
plot(deer$V1, sapply(X=deer$V1, FUN=function(deerNLL) llh(deerNLL, x=x), type="l"))
plot(deer$V1, sapply(X=deer$V1, FUN=function(deerNLL) llh(deerNLL, x=x)))
plot(deer$V1, sapply(X=deer$V1, FUN=function(deerNLL)))
plot(deerNLL(deer$V1), deerfit$par[3])
lines(seq(0,100),deerfit$par[1],lwd=4,lty=2)
lines(seq(0,100),deerfit$par[1]*seq(0,100),lwd=4,lty=2)
plot(seq(0,100),deerfit$par[1]*seq(0,100),lwd=4,lty=2)
plot(deer$V1,deerfit$par[1]*seq(0,100),lwd=4,lty=2)
qplot(deer$V1, geom="histogram")
ggplot(data=deer, stat_bin=7, aes(deer$V1)) + geom_histogram()
qplot(deer$V1, geom="histogram")
ggplot(data=deer, stat_bin=0.1, aes(deer$V1)) + geom_histogram()
hist(deer$V1, breaks = 7, xlab="Proportion of time spent foraging", main="")
order(deer$V1)
guess = c(1,1,5,5)
deerfit <- optim(par=guess, fn=DeerNLL, p=deer$V1)
tadpoles <- read.table("tadpoles.txt", header=T)
tadpoles
consumed = tadpoles[,1]-tadpoles[,2]
plot(tadpoles[,1],consumed)
tadpoleNLL <- function(p,N,consumed){
a=p[1]
h=p[2]
p = (a/(1+a*h*N)) #deterministic
NLL = -sum(dbinom(consumed,N,p,log=T)) ##likelihood function, stochastic
return(NLL)
}
guess=c(0.1,-0.1)
fit = optim(par=guess,fn=tadpoleNLL, N=tadpoles[,1],y=consumed)
guess=c(0.1,-0.1)
fit = optim(par=guess,fn=tadpoleNLL, N=tadpoles[,1],p=consumed)
typeIInll<-function(params,N,k){
a=params[1]
h=params[2]
p=a/(1+a*h*N)
-sum(dbinom(k,N,p,log=TRUE))
}
guess=c(0.1,-0.1)
fit=optim(par=guess,fn=typeIInll,N=tadpoles[,1],k=consumed)
lines(seq(0,50),fit$par[1]/(1+fit$par[1]*fit$par[2]*seq(0,50))*seq(0,50),lwd=4,lty=2)
avec=seq(4,12,length=50)
aprof=numeric(50)
for(i in 1:50){
aprof[i]=optim(par=c(a=1),fn=typeIInll,N=tadpoles[,1], k=consumed, a=avec[i])$value
}
avec=seq(4,12,length=50)
aprof=numeric(50)
for(i in 1:50){
aprof[i]=optim(par=a,fn=typeIInll,N=tadpoles[,1], k=consumed, a=avec[i])$value
}
