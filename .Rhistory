}
else{
replicates2 = c(replicates2,i)
print("i found a new run")
}
}
}
replicates2
}
findem = function(argument){
replicates = c()
for(i in 2:length(argument)){
if(argument[i]==argument[i-1])
replicates <- append(replicates,i-1)
}
print(replicates)
replicates2 = c()
for(i in 1:length(replicates)){
print("i: ")
print(i)
if(i==1){
replicates2 = c(i)
print("this is the first run")
}
else {
if(replicates[i]+1 == replicates[i]){
print( "this is the same run")
}
else{
replicates2 = c(replicates2,i)
print("i found a new run")
}
}
}
replicates2
}
findem(q4)
findem = function(argument){
replicates = c()
for(i in 2:length(argument)){
if(argument[i]==argument[i-1])
replicates <- append(replicates,i-1)
}
print(replicates)
replicates2 = c()
for(i in 1:length(replicates)){
print("i: ")
print(i)
if(i==1){
replicates2 = c(i)
print("this is the first run")
}
else {
if(replicates[i-1] == replicates[i]-1){
print( "this is the same run")
}
else{
replicates2 = c(replicates2,i)
print("i found a new run")
}
}
}
replicates2
}
findem(q4)
findem = function(argument){
replicates = c()
for(i in 2:length(argument)){
if(argument[i]==argument[i-1])
replicates <- append(replicates,i-1)
}
print(replicates)
replicates2 = c()
for(i in 1:length(replicates)){
#print("i: ")
#print(i)
if(i==1){
replicates2 = c(i)
#print("this is the first run")
}
else {
if(replicates[i-1] == replicates[i]-1){
#print( "this is the same run")
}
else{
replicates2 = c(replicates2,i)
#print("i found a new run")
}
}
}
replicates2
}
q4
findem(q4)
findem = function(argument){
replicates = c()
for(i in 2:length(argument)){
if(argument[i]==argument[i-1])
replicates <- append(replicates,i-1)
}
print(replicates)
replicates2 = c()
for(i in 1:length(replicates)){
#print("i: ")
#print(i)
if(i==1){
replicates2 = c(replicates[i])
#print("this is the first run")
}
else {
if(replicates[i-1] == replicates[i]-1){
#print( "this is the same run")
}
else{
replicates2 = c(replicates2,replicates[i])
#print("i found a new run")
}
}
}
replicates2
}
findem(q4)
q4
c(1:24)
c(1:30)
c(1:27)
q4
findem(q4)
findem = function(argument){
replicates = c()
for(i in 2:length(argument)){
if(argument[i]==argument[i-1])
replicates <- append(replicates,i-1)
}
#print(replicates)
replicates2 = c()
for(i in 1:length(replicates)){
#print("i: ")
#print(i)
if(i==1){
replicates2 = c(replicates[i])
#print("this is the first run")
}
else {
if(replicates[i-1] == replicates[i]-1){
#print( "this is the same run")
}
else{
replicates2 = c(replicates2,replicates[i])
#print("i found a new run")
}
}
}
replicates2
}
c(1:27)
q4
findem(q4)
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(q4[j] == q4[first]){
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(q4[j] == q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
?while
?
? while
?
?c
?while
?
findem(q4)
length(q4.index)
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(q4[j] == q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(q4[j]==q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
first
q4.index[i]
q4.index
i
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(j < length(q4.index) & q4[j]==q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.times
j
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = i
count = 0
while(j < length(q4.index) & q4[j]==q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.times
i
j
q4.index
#going to input indexes into vector now
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = i
count = 0
while(j < length(q4) & q4[j]==q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.times
q4
q4$24
q4[24]
q4[23]
q4.index[i]
j
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = i
count = 0
while(j <= length(q4) & q4[j]==q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.times
j
i
q4.index <- findem(q4)
q4.times <- c()
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(j <= length(q4) & q4[j]==q4[first]){
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
q4.times
findem = function(argument){ #make a function and argument is place holder for q4
replicates = c() # preallocating empty vector to store runs in
for(i in 2:length(argument)){# started with 2nd element because index of 1st minus one doesnt make sense
if(argument[i]==argument[i-1]) # for every element that has same value, append them to replicates vector
replicates <- append(replicates,i-1)
}
#print(replicates)
replicates2 = c()
for(i in 1:length(replicates)){
#print("i: ")
#print(i)
if(i==1){ #this is first start of the run that can't be compared to previous run
replicates2 = c(replicates[i])
#print("this is the first run")
}
else {
if(replicates[i-1] == replicates[i]-1){ ## checking within same run
#print( "this is the same run")
}
else{
replicates2 = c(replicates2,replicates[i]) #new run
#print("i found a new run")
}
}
}
replicates2
}
#going to input indexes into vector now
q4.index <- findem(q4) # preallocating new empty vector to store indexes of the beginning of runs
q4.times <- c() ## preallocating empty vector to store the number of times an element is repeated
for(i in 1:length(q4.index)){
first = q4.index[i]
j = q4.index[i]
count = 0
while(j <= length(q4) & q4[j]==q4[first]){ # used a while loop because I want to count within runs
j = j + 1
count = count + 1
}
q4.times = append(q4.times,count)
}
replicates2
replicates
q4.times
q4.index
for(i in 1:25){
nutrient[i] = rep(1:5, each = 5)
}
nutrient <- c()
for(i in 1:25){
nutrient[i] = rep(1:5, each = 5)
}
ques5 <- matrix(c(1,2,3,4,5), nrow = 5, ncol = 1, byrow = FALSE)
> 1:nrow(ques5)
[1] 1 2 3 4 5
> ques5[5,]
[1] 5
> rows <- rep(1:nrow(ques5), ques5[5,])
ques5 <- matrix(c(1,2,3,4,5), nrow = 5, ncol = 1, byrow = FALSE)
1:nrow(ques5)
ques5[5,]
rows <- rep(1:nrow(ques5), ques5[5,])
rows
replicates <- rep(c(1,2,3,4,5), each = 5)
replicates
cbind(replicates, rows)
nutrient <- matrix(0, nrow = 25, ncol = 3)
nutrient ## empty matrix of correct dimensions
#create a loop to make treatment column (for i in nrow)
# just an example from stack exchange
nutrient=matrix(0, nrow=25, ncol=2)
for(j in 1:25){
for(i in 1:2){
nutrient[i] == rep(c(1:5), each = 5)
nutient[j] == rep(1:nrow(nutrient), nutrient[5,])
}
)
nutrient <- matrix(0, nrow = 25, ncol = 3)
nutrient
nutrient=matrix(0, nrow=25, ncol=2)
for(j in 1:25){
for(i in 1:2){
nutrient[i] == rep(c(1:5), each = 5)
nutient[j] == rep(1:nrow(nutrient), nutrient[5,]))
}
}
my.matrix <- c()
for(i in 1:10){
my.matrix <- cbind(my.matrix, rep(1,100))
}
my.matrix
nutrient <- c()
for(i in 1:25){
nutrient <- cbind(nutrient, rep(1:5, 5))
}
nutrient
replicates <- rep(c(1,2,3,4,5), each = 5)
replicates
treatments <- rep(c(1:5),5)
treatments
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
treatments
reps
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
nutrient <- c()
for(i in 1:2){
for(j in 1:2)
reps[j] <- reps
treatments[i] <- treatments
}
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
nutrient <- c()
for(i in 1:25){
for(j in 1:25)
reps[j] <- reps
treatments[i] <- treatments
}
nutrients
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
nutrient <- matrix(0, nrow = 25, ncol = 2)
for(i in 1:ncol(nutrient)){
treatments[i] = nutrient[,1]
for(j in 1:ncol(nutrient)){
reps[i] = nutrient[,2]
}
''
)
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
nutrient <- matrix(0, nrow = 25, ncol = 2)
for(i in 1:ncol(nutrient)){
treatments[i] = nutrient[,1]
for(j in 1:ncol(nutrient)){
reps[i] = nutrient[,2]
}
}
treatments
treatments <- rep(c(1,2,3,4,5), each = 5)
treatments
reps
reps <- rep(c(1:5),5)
reps
nutrient
nutrient[,1]
nutrient[,2]
nutrient[,3]
nutrient[,1]
nutrient[,3]
nutrient[,2]
nutrient[,1] = treatments
nutrient[,2] = reps
nutrient
cbind(replicates, rows)
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
nutrient <- matrix(0, nrow = 25, ncol = 2)
for(i in 1:ncol(nutrient)){
nutrient[i,1] = treatments[i]
}
for(j in 1:ncol(nutrient)){
nutrient[j,2] = reps[j]
}
nutrient
ncol(nutrient)
treatments <- rep(c(1,2,3,4,5), each = 5)
reps <- rep(c(1:5),5)
nutrient <- matrix(0, nrow = 25, ncol = 2)
for(i in 1:nrow(nutrient)){
nutrient[i,1] = treatments[i]
}
for(j in 1:nrow(nutrient)){
nutrient[j,2] = reps[j]
}
nutrient
install.packages("IPMpack")
library(IPMpack)
ephydra <- read.csv("C:/Users/klbai/Desktop/ephydra.csv")
View(ephydra)
ephydra <- matrix(ephydra)
dff <- generateData(ephydra)
ephydra <- data.frame(ephydra)
dff <- generateData(ephydra)
ephydra
ephydra <- read.csv("C:/Users/klbai/Desktop/ephydra.csv")
View(ephydra)
ephydra.2 <- data.frame(ephydra)
ephydra.2
dff <- generateData(ephydra.2)
dff <- generateData()
dff
plot(ephydra.2$size, ephydra.2$sizeNext, xlab = "Size at t", ylab = "Size at t+1")
gr1 <- makeGrowthObj(dataf = ephydra.2, Formula = sizeNext~size) sv1 <- makeSurvObj(ephydra.2, Formula = surv~size+sizeNext)
gr1 <- makeGrowthObj(dataf = ephydra.2, Formula = sizeNext~size)
gr1
sv1 <- makeSurvObj(ephydra.2, Formula = surv~size+sizeNext)
par(mfrow = c(1, 2), bty = "l", pty = "m")
p1 <- picGrow(ephydra.2, gr1)
p2 <- picSurv(ephydra.2, sv1, ncuts = 30)
Pmatrix <- makeIPMPmatrix(nBigMatrix = 50,
minSize = -5, maxSize = 35,
growObj = gr1, survObj = sv1,
correction = "constant")
Pmatrix
curve(1/(1+exp(-(-1 + 1*x))), from=-5, to=5, main="(b)")
> abline(h=1/2, lty=2)
> abline(v=1, lty=2)
curve(1/(1+exp(-(-1 + 1*x))), from=-5, to=5, main="(b)")
abline(h=1/2, lty=2)
abline(v=1, lty=2)
curve(1/(1+exp(-(-1 + 1*x))), from=-5, to=5, main="(b)")
abline(h=1/2, lty=2)
abline(v=1, lty=2)
rm = list(ls())
