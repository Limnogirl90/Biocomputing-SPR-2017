lines(seq(0,1,0.01),dbeta(x=seq(0,1,0.01),pFfit$par[1],pFfit$par[2])*10,lwd=3)
pFfit$par[1]/(pFfit$par[1]+pFfit$par[2])
litter <- read.csv("LIDETdata_Hobbs.csv", header=T, stringsAsFactors = F)
litter
plot(litter$Initial_percent_sugars,litter$M_t)
plot(litter$Initial_percent_cellulose,litter$M_t)
?dgamma
plot(litter$t, litter$M_t)
plot(litter$M_t, litter$t)
Litter.nll <- function(p, M_t, t){
a=p[1]
b=p[2]
shape =p[3]
expected = -(log(M_t)/t)
NLL = -sum(dgamma(M_t, shape=shape, scale=expected/shape,log=T))
}
guess = c(80,.25,1 )
litter.fit <- optim(par=guess, Litter.nll, M_t = litter$M_t, t = litter$t)
litter.fit
guess = c(80,1,1 )
litter.fit <- optim(par=guess, Litter.nll, M_t = litter$M_t, t = litter$t)
plot(litter$t, litter$M-t)
plot(litter$t, litter$M_t)
Litter.nll <- function(p, M_t, t){
a=p[1]
b=p[2]
shape =p[3]
expected = -(log(M_t)/t)
NLL = -sum(dgamma(M_t, shape=shape, scale=expected/shape,log=T))
}
guess = c(80,1,1 )
litter.fit <- optim(par=guess, Litter.nll, M_t = litter$M_t, t = litter$t)
Litter.nll <- function(p,x,y){
a=p[1]
b=p[2]
shape =p[3]
expected = -(log(x)/y)
NLL = -sum(dgamma(x, shape=shape, scale=expected/shape,log=T))
}
guess = c(80,1,1)
guess = c(80,1,1)
litter.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t)
Litter.nll <- function(p,x,y){
b=p[1]
k=p[2]
shape =p[3]
expected = exp(-k*y)
NLL = -sum(dgamma(x=litter$M_t, shape=shape, scale=expected/shape,log=T))
}
guess = c(80,1,1)
litter.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t)
litter.fit
Litter.nll <- function(p,x,y){
k=p[1]
shape =p[2]
expected = exp(-k*y)
NLL = -sum(dgamma(x=litter$M_t, shape=shape, scale=expected/shape,log=T))
}
Litter.nll <- function(p,x,y){
k=p[1]
shape =p[2]
expected = exp(-k*y)
NLL = -sum(dgamma(x=litter$M_t, shape=shape, scale=expected/shape,log=T))
}
litter.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t)
guess = c(1,.25)
litter.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t)
litter.fit
Litter.nll <- function(p,x,y,M1,M2,M3,CDI){
k1=p[1]
k2=p[2]
k3=p[3]
shape =p[4]
expected = (M1*exp(-k1*CDI*y)) + (M2*exp(-k2*CDI*y)) + (M3*exp(-k3*CDI*y))
NLL = -sum(dgamma(x=litter$M_t, shape=shape, scale=expected/shape,log=T))
}
guess = c(0.5,0.5,0.5,1)
litter.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t, M1=litter$Initial_percent_sugars,M2=litter$Initial_percent_cellulose,M3=litter$Initial_percent_lignin, CDI=litter$CDI)
litter.fit
guess = c(0.5,0.5,0.5,1)
littercomplex.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t, M1=litter$Initial_percent_sugars,M2=litter$Initial_percent_cellulose,M3=litter$Initial_percent_lignin, CDI=litter$CDI)
litterfit1 =litter.fit$value*2
litterfit2 = littercomplex.fit$value*2
diffD = litterfit1-litterfit2
pchisq(diffD,df=1,lower.tail=F)
litterfit1 =litter.fit$value*2
litterfit2 = littercomplex.fit$value*2
diffD = litterfit1-litterfit2
pchisq(diffD,df=1,lower.tail=F)
litterfit1 =litter.fit$value*2
litterfit2 = littercomplex.fit$value*2
diffD = litterfit1-litterfit2
pchisq(diffD,df=1,lower.tail=FALSE)
AIC.simple = 2*litter.fit$value+2*length(litter.fit$par)
AIC.complex = 2*littercomplex.fit$value+2*length(littercomplex.fit$par)
c(AIC.simple,AIC.complex)
Litter.nll <- function(p,x,y){
k=p[1]
shape =p[2]
expected = exp(-k*y)
NLL = -sum(dgamma(x=litter$M_t, shape=shape, scale=expected/shape,log=T))
}
guess = c(1,.25)
litter.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t)
Litter.nll <- function(p,x,y,M1,M2,M3,CDI){
k1=p[1]
k2=p[2]
k3=p[3]
shape =p[4]
expected = (M1*exp(-k1*CDI*y)) + (M2*exp(-k2*CDI*y)) + (M3*exp(-k3*CDI*y))
NLL = -sum(dgamma(x=litter$M_t, shape=shape, scale=expected/shape,log=T))
}
guess = c(0.5,0.5,0.5,1)
littercomplex.fit <- optim(par=guess, fn=Litter.nll, x = litter$M_t, y = litter$t, M1=litter$Initial_percent_sugars,M2=litter$Initial_percent_cellulose,M3=litter$Initial_percent_lignin, CDI=litter$CDI)
AIC.simple = 2*litter.fit$value+2*length(litter.fit$par)
AIC.complex = 2*littercomplex.fit$value+2*length(littercomplex.fit$par)
c(AIC.simple,AIC.complex)
plot(birds$latitude,birds$sighted,lwd=2,cex=1.5,main="Birds")
mod0=glm(birds$sighted~birds$latitude,family=binomial)
summary(mod0)
plot(birds$latitude, birds$sighted, lwd=2,cex=1.5, xlab="Latitude", ylab= "Probability of sighting")
lines(seq(34,50,1.5),ilogit(seq(34,50,1.5),mod0$coefficients),lwd=2,col="red",lty=2)
sighting = numeric(length(birds$latitude))
for(i in 1:length(sighting)){
sighting[i] = (birds$latitude[i]*.18934)-7.70979
}
plot(birds$latitude,sighting)
biofuel <- read.table("biofuel.txt",header=T)
biofuel
plot(biofuel$feed_concentration,biofuel$fuel_produced, xlab="Concentration", ylab="Fuel produced")
notreat = biofuel[which(biofuel$pretreated==0),]
treat = biofuel[which(biofuel$pretreated==1),]
plot(treat, biofuel$fuel_produced)
plot(notreat)
modfuel
plot(biofuel$feed_concentration,biofuel$fuel_produced, xlab="Concentration", ylab="Fuel produced")
legend("upper right",c(notreat,treat),col=c("red", "blue"))
plot(biofuel$feed_concentration,biofuel$fuel_produced, xlab="Concentration", ylab="Fuel produced")
legend = ("upper right",c(notreat,treat),col=c("red", "blue"))
?legend
notreat
plot(notreat$feed_concentration,notreat$fuel_produced)
plot(treat$feed_concentration,treat$fuel_produced)
modtreat = glm(treat$fuel_produced~treat$feed_concentration,family=Gaussian)
modtreat
modtreat = glm(treat$fuel_produced~treat$feed_concentration)
modtreat = glm(treat$fuel_produced~treat$feed_concentration)
modtreat
modnotreat =glm(notreat$fuel_produced~notreat$feed_concentration)
modnotreat
plot(birds$latitude,jitter(birds$sighted),lwd=2,cex=1.5,main="Birds")
predlat = seq(35,49,0.01)
predlogitP = -7.70979+0.18934*predlat
lines(predlat,predP,lwd=2)
predlat = seq(35,49,0.01)
predlogitP = -7.70979+0.18934*predlat
predP = exp(predlogitP)/(1+exp(predlogitP))
lines(predlat,predP,lwd=2)
predlat[abs(predP-0.5)==min(abs(predP-0.5))]
predlat[abs(predP-0.5)==min(abs(predP-0.5))]
birds$HvP == 1
hist.birds$HvP ==0
birds$HvP = 1
hist.birds$HvP =0
rbind(hist.birds,birds)
hist(data1$V1, freq=False, main="Histogram of Data1")
hist(data1$V1, freq=FALSE, main="Histogram of Data1")
biofuel <- read.table("biofuel.txt",header=T)
biofuel
plot(biofuel$feed_concentration,biofuel$fuel_produced, xlab="Concentration", ylab="Fuel produced")
notreat = biofuel[which(biofuel$pretreated==0),]
treat = biofuel[which(biofuel$pretreated==1),]
notreat
modfuel <- glm(biofuel$fuel_produced~biofuel$feed_concentration+biofuel$pretreated)
modfuel
plot(notreat$feed_concentration,notreat$fuel_produced)
plot(treat$feed_concentration,treat$fuel_produced)
library(ggplot2)
qplot(biofuel$fuel_produced,biofuel$pretreated)
plot(biofuel$feed_concentration, biofuel$fuel_produced~biofuel$pretreated)
plot(biofuel$feed_concentration, biofuel$fuel_produced)
plot(biofuel$feed_concentration, biofuel$fuel_produced, biofuel[which(biofuel$pretreated==1)])
ggplot(biofuel, aes(x = biofuel$feed_concentration, y = biofuel$fuel_produced, colour = biofuel$pretreated)) +
geom_point() +
facet_wrap( ~ biofuel$pretreated)
ggplot(biofuel, aes(x = biofuel$feed_concentration, y = biofuel$fuel_produced, colour = biofuel$pretreated)) +
geom_point()
bioNLL <- function(p,x,y,treat){
a=p[1]
b=p[2]
shape=p[3]
expected = a*(exp(-b*treat*x))
NLL = -sum(dgamma(y,shape=shape, scale=expected/shape,log=T))
}
guess=c(5,60,1)
biofit <- optim(par=guess, fn=bioNLL, x=biofuel$feed_concentration,y=biofuel$fuel_produced,treat=biofuel$pretreated)
guess=c(1,1,1)
guess=c(1,1,1)
biofit <- optim(par=guess, fn=bioNLL, x=biofuel$feed_concentration,y=biofuel$fuel_produced,treat=biofuel$pretreated)
biofit
simplest <- function(p,time,Mt,CDI){
k=p[1]
shape1=p[2]
meanMt=exp(-k*time*CDI)
NLL = -sum(dbeta(Mt,shape1=shape1,shape2=(shape1-meanMt*shape1),log=T))
}
plusclimatefit=optim(par=c(k=0.5,shape1=5),fn=simplest,time=litter$t,Mt=litter$M_t,CDI=litter$CDI)
?sapply
?apply
?tapply
?lapply
normalized = lapply(litter$M_t, FUN(i)=i/100)
unique(biofuel$feed_concentration)
ggplot(biofuel, aes(x = biofuel$feed_concentration, y = biofuel$fuel_produced, colour = biofuel$pretreated)) +
geom_point()
bioNLL2 <- function(p,feed,fuel,treat){
m=p[1]
b=p[2]
b1=p[3]
shape=p[4]
expected = m*feed+b+b1*treat
NLL = -sum(dgamma(fuel,shape=shape, scale=expected/shape,log=T))
}
guess=c(1,2,2,1)
biofit <- optim(par=guess, fn=bioNLL2, feed=biofuel$feed_concentration,fuel=biofuel$fuel_produced,treat=biofuel$pretreated)
biofit
y = sample.int(c(1:50),size=50)
y = sample.int(c(1:50),size=50,replace=T)
y
y = sample.int(seq(1:50),size=50,replace=T)
y
y = sample(seq(1:50),size=50,replace=T)
y
x = sample(seq(1:50,2),size=50, replace=T)
x = sample(seq(1:50),size=50, replace=T)
x
plot(x,y)
x = sample(seq(1:50),size=50, replace=F)
plot(x,y)
mod.y = glm(y~x,family=gamma)
?family
mod.y = glm(y~x,family=inverse)
mod.y = glm(y~x,family=gamma)
?glm
?family
mod.y = glm(y~x,family=Gamma)
mod.y
plot(x,y,xlab='X',ylab='Y')
ilogit <- function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta))
return(beta)
}
lines(seq(1,50,1),ilogit(seq(1,50,1),mod$coefficients),lwd=2,col='red',lty=2)
lines(seq(1,50,1),ilogit(seq(1,50,1),mod.y$coefficients),lwd=2,col='red',lty=2)
lines(seq(1:50),ilogit(seq(1:50),mod.y$coefficients),lwd=2,col='red',lty=2)
lines(seq(1:50),ilogit(seq(1:50),mod.y$coefficients),lwd=2,col='red',lty=2)
y = sample(seq(1:50),size=50,replace=T)
x = sample(seq(1:50),size=50, replace=F)
mod.y = glm(y~x,family=Gamma)
mod.y
plot(x,y,xlab='X',ylab='Y')
ilogit <- function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta))
return(beta)
}
lines(seq(1:50),ilogit(seq(1:50),mod.y$coefficients),lwd=2,col='red',lty=2)
seq(1:50)
lines(seq(1:50,1),ilogit(seq(1:50,1),mod.y$coefficients),lwd=2,col='red',lty=2)
length(x)
length(y)
length(seq(1,50))
ilogit(seq(1:50))
ilogit(seq(1:50),mod.y$coefficients)
length(ilogit(seq(1:50),mod.y$coefficients))
lines(seq(1:50),ilogit(seq(1:50),mod.y$coefficients),lwd=2,col='red',lty=2)
ilogit(seq(1:50,1),mod.y$coefficients)
lines(seq(1:50),ilogit(seq(1:50),mod.y$coefficients)*50,lwd=2,col='red',lty=2)
seq(1,50)
lines(seq(1:50),ilogit(seq(1,50),mod.y$coefficients),lwd=2,col='red',lty=2)
lines(seq(1,50),ilogit(sample(seq(1:50),sample=50),mod.y$coefficients),lwd=2,col='red',lty=2)
lines(seq(1,50),ilogit(sample(seq(1:50),size=50),mod.y$coefficients),lwd=2,col='red',lty=2)
lines(seq(1:50),ilogit(length(y),mod.y$coefficients),lwd=2,col='red',lty=2)
lines(seq(1:50),ilogit(length(y),mod.y$coefficients(length(y))),lwd=2,col='red',lty=2)
lines(seq(1:50),ilogit((y),mod.y$coefficients),lwd=2,col='red',lty=2)
x = c(4.9,1.8,0.2,5.1,8.7,3.0,8.7,2.0,7.9,6.0)
y = c(17.6,1.2,0.2,10.3,10.0,14.0,12.0,4.8,15.3,12.1)
plot(x,y)
linearNLL <- function(x,y,p){
B0=p[1]
B1=p[2]
sd=exp(p[3])
expected = B1*y+B0
return(sum(dnorm(y,x,sd)))
}
x = c(4.9,1.8,0.2,5.1,8.7,3.0,8.7,2.0,7.9,6.0)
y = c(17.6,1.2,0.2,10.3,10.0,14.0,12.0,4.8,15.3,12.1)
plot(x,y)
linearNLL <- function(x,y,p){
B0=p[1]
B1=p[2]
sd=exp(p[3])
expected = B1*y+B0
return(sum(dnorm(y,x,sd)))
}
mmNLL <- function(p,x,y){
a=p[1]
b=p[2]
sd=exp(p[3])
expected = a*x*exp(b+x)
NLL = -sum(dnorm(x,expected,sd,log=T))
return(expected)
}
linearFit = optim(c(0,1,-1),linearNLL,x=x,y=y)
guess=c(1,1,-1)
mmFit = optim(guess[1:2],linearNLL,x=x,y=y)
linearFit
?dnorm
linearNLL <- function(p,x,y){
B0=p[1]
B1=p[2]
sd=expp[3]
expected = B1*y+B0
NLL = -sum(dnorm(y,mean=expected, sd=sd,log=T))
return(NLL)
}
linearFit = optim(par=c(0,1,-1),fn=linearNLL,x=x,y=y)
linearNLL <- function(p,x,y){
B0=p[1]
B1=p[2]
sd=p[3]
expected = B1*y+B0
NLL = -sum(dnorm(y,mean=expected, sd=sd,log=T))
return(NLL)
}
linearFit = optim(par=c(0,1,-1),fn=linearNLL,x=x,y=y)
linearFit
mmNLL <- function(p,x,y){
a=p[1]
b=p[2]
sd=p[3]
expected = a*x*exp(b+x)
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(expected)
}
mmNLL <- function(p,x,y){
a=p[1]
b=p[2]
sd=p[3]
expected = a*x*exp(b+x)
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(expected)
}
guess=c(1,1,-1)
mmFit = optim(par=guess,fn=mmNLL,x=x,y=y)
linearNLL <- function(p,x,y){
B0=p[1]
B1=p[2]
sd=p[3]
expected = B1*x+B0
NLL = -sum(dnorm(y,mean=expected, sd=sd,log=T))
return(NLL)
}
linearFit = optim(par=c(0,1,-1),fn=linearNLL,x=x,y=y)
linearFit = optim(par=c(0,1,1),fn=linearNLL,x=x,y=y)
linearFit
mmNLL <- function(p,x,y){
a=p[1]
b=p[2]
sd=p[3]
expected = a*x*exp(b+x)
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(expected)
}
guess=c(1,1,-1)
mmFit = optim(par=guess,fn=mmNLL,x=x,y=y)
guess=c(1,1,1)
mmFit = optim(par=guess,fn=mmNLL,x=x,y=y)
length(x)
length(y)
linearNLL <- function(p,x,y){
B0=p[1]
B1=p[2]
sd=p[3]
expected = B1*x+B0
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(NLL)
}
linearFit = optim(par=c(0,1,1),fn=linearNLL,x=x,y=y)
mmNLL <- function(p,x,y){
a=p[1]
b=p[2]
sd=p[3]
expected = a*x*exp(b+x)
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(NLL)
}
guess=c(1,1,1)
mmFit = optim(par=guess,fn=mmNLL,x=x,y=y)
mmFit
?dbeta
y = sample(seq(1:50),size=50,replace=T)
x = sample(seq(1:50),size=50, replace=F)
mod.y = glm(y~x,family=Gamma)
mod.y
plot(x,y,xlab='X',ylab='Y')
lines(seq(1:50), ilogit(seq(1:50),mod.y$coefficients*seq(1:50)),lwd=2,col='red')
ilogit <- function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta))
return(prob)
}
plot(x,y,xlab='X',ylab='Y')
lines(seq(1:50), ilogit(seq(1:50),mod.y$coefficients*seq(1:50)),lwd=2,col='red')
mod.y
predX=seq(1,50,1)
predLogitY=0.0333759+0.0003583*predX
predY=exp(predLogitP)/(1+exp(predLogitP))
predY=exp(predLogitY)/(1+exp(predLogitY))
lines(predX,predY,lwd=2,col='red')
y = sample(seq(1:50),size=50,replace=F)
x = sample(seq(1:50),size=50, replace=F)
mod.y = glm(y~x,family=Gamma)
mod.y
plot(x,y,xlab='X',ylab='Y')
predX=seq(1,50,1)
predLogitY=0.0333759+0.0003583*predX
predY=exp(predLogitY)/(1+exp(predLogitY))
lines(predX,predY,lwd=2,col='red')
y=runif(50,min=2,max=100)
x=runif(50,min=20,max=120)
plot(x,y)
mod.y = glm(y~x,family=Gamma)
mod.y
plot(x,y,xlab='X',ylab='Y')
predX=seq(20,120,.1)
predLogitY=0.0333759+0.0003583*predX
predY=exp(predLogitY)/(1+exp(predLogitY))
lines(predX,predY,lwd=2,col='red')
y
predX=seq(1:50)
predLogitY=0.0333759+0.0003583*predX
predY=exp(predLogitY)/(1+exp(predLogitY))
lines(predX,predY,lwd=2,col='red')
?rgamma
y=rgamma(50,shape=1,rate=1)
y
ilogit<function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta) )
return(prob)
}
y = sample(seq(1:50),size=50,replace=F)
x = sample(seq(1:50),size=50, replace=F)
mod.y = glm(y~x,family=Gamma)
mod.y
plot(x,y,xlab='X',ylab='Y')
ilogit<function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta) )
return(prob)
}
ilogit<function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta) )
return(prob)
}
ilogit<function(x,beta){prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta))
return(prob)
}
ilogit<function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta))
return(prob)
}
ilogit<function(x,beta){
prob=exp(cbind(1,x)%*%beta)/(1+exp(cbind(1,x)%*%beta))
return(prob)
}
mod.y$coefficients
predX=seq(1:50)
predLogitY=0.0333759+0.0003583*predX
predY=exp(predLogitY)/(1+exp(predLogitY))
lines(predX,predY,lwd=2,col='red')
predLogitY=mod.y$coefficients*predX
predX=seq(1:50)
predLogitY=mod.y$coefficients*predX
predY=exp(predLogitY)/(1+exp(predLogitY))
lines(predX,predY,lwd=2,col='red')
AICs =c(linear=linearFit$value*2,mm=mmFit$value*2)
AICs
x = c(4.9,1.8,0.2,5.1,8.7,3.0,8.7,2.0,7.9,6.0)
y = c(17.6,1.2,0.2,10.3,10.0,14.0,12.0,4.8,15.3,12.1)
plot(x,y)
linearNLL <- function(p,x,y){
B0=p[1]
B1=p[2]
sd=p[3]
expected = B1*x+B0
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(NLL)
}
mmNLL <- function(p,x,y){
a=p[1]
b=p[2]
sd=p[3]
expected = a*x*exp(b+x)
NLL = -sum(dnorm(y,mean=expected,sd=sd,log=T))
return(NLL)
}
linearFit = optim(par=c(0,1,1),fn=linearNLL,x=x,y=y)
linearFit
guess=c(1,1,1)
mmFit = optim(par=guess,fn=mmNLL,x=x,y=y)
AICs =c(linear=linearFit$value*2,mm=mmFit$value*2)
AICs
guess=c(1,1,-1)
mmFit = optim(par=guess,fn=mmNLL,x=x,y=y)
